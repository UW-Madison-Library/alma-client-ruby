=begin
#Alma API

#This web service provides a RESTful interface to Alma.

OpenAPI spec version: 1.0.0
Contact: andy.goodnough@wisc.edu
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module AlmaClient
  class User
    attr_accessor :record_type

    attr_accessor :primary_id

    attr_accessor :first_name

    attr_accessor :middle_name

    attr_accessor :last_name

    attr_accessor :full_name

    attr_accessor :pin_number

    attr_accessor :user_title

    attr_accessor :job_category

    attr_accessor :job_description

    attr_accessor :gender

    attr_accessor :user_group

    attr_accessor :campus_code

    attr_accessor :web_site_url

    attr_accessor :cataloger_level

    attr_accessor :preferred_language

    attr_accessor :account_type

    attr_accessor :external_id

    attr_accessor :password

    attr_accessor :force_password_change

    attr_accessor :status

    attr_accessor :status_date

    attr_accessor :requests

    attr_accessor :loans

    attr_accessor :fees

    attr_accessor :contact_info

    attr_accessor :pref_first_name

    attr_accessor :pref_middle_name

    attr_accessor :pref_last_name

    attr_accessor :researcher

    attr_accessor :link

    attr_accessor :user_identifier

    attr_accessor :user_role

    attr_accessor :user_statistic

    attr_accessor :proxy_for_user

    attr_accessor :rs_library

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'record_type' => :'record_type',
        :'primary_id' => :'primary_id',
        :'first_name' => :'first_name',
        :'middle_name' => :'middle_name',
        :'last_name' => :'last_name',
        :'full_name' => :'full_name',
        :'pin_number' => :'pin_number',
        :'user_title' => :'user_title',
        :'job_category' => :'job_category',
        :'job_description' => :'job_description',
        :'gender' => :'gender',
        :'user_group' => :'user_group',
        :'campus_code' => :'campus_code',
        :'web_site_url' => :'web_site_url',
        :'cataloger_level' => :'cataloger_level',
        :'preferred_language' => :'preferred_language',
        :'account_type' => :'account_type',
        :'external_id' => :'external_id',
        :'password' => :'password',
        :'force_password_change' => :'force_password_change',
        :'status' => :'status',
        :'status_date' => :'status_date',
        :'requests' => :'requests',
        :'loans' => :'loans',
        :'fees' => :'fees',
        :'contact_info' => :'contact_info',
        :'pref_first_name' => :'pref_first_name',
        :'pref_middle_name' => :'pref_middle_name',
        :'pref_last_name' => :'pref_last_name',
        :'researcher' => :'researcher',
        :'link' => :'link',
        :'user_identifier' => :'user_identifier',
        :'user_role' => :'user_role',
        :'user_statistic' => :'user_statistic',
        :'proxy_for_user' => :'proxy_for_user',
        :'rs_library' => :'rs_library'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'record_type' => :'RecordType',
        :'primary_id' => :'String',
        :'first_name' => :'String',
        :'middle_name' => :'String',
        :'last_name' => :'String',
        :'full_name' => :'String',
        :'pin_number' => :'String',
        :'user_title' => :'UserTitle',
        :'job_category' => :'JobCategory',
        :'job_description' => :'String',
        :'gender' => :'Gender',
        :'user_group' => :'UserGroup',
        :'campus_code' => :'CampusCode',
        :'web_site_url' => :'String',
        :'cataloger_level' => :'CatalogerLevel',
        :'preferred_language' => :'PreferredLanguage',
        :'account_type' => :'AccountType',
        :'external_id' => :'String',
        :'password' => :'String',
        :'force_password_change' => :'String',
        :'status' => :'Status',
        :'status_date' => :'String',
        :'requests' => :'String',
        :'loans' => :'String',
        :'fees' => :'String',
        :'contact_info' => :'String',
        :'pref_first_name' => :'String',
        :'pref_middle_name' => :'String',
        :'pref_last_name' => :'String',
        :'researcher' => :'String',
        :'link' => :'String',
        :'user_identifier' => :'String',
        :'user_role' => :'String',
        :'user_statistic' => :'String',
        :'proxy_for_user' => :'String',
        :'rs_library' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'record_type')
        self.record_type = attributes[:'record_type']
      end

      if attributes.has_key?(:'primary_id')
        self.primary_id = attributes[:'primary_id']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.has_key?(:'pin_number')
        self.pin_number = attributes[:'pin_number']
      end

      if attributes.has_key?(:'user_title')
        self.user_title = attributes[:'user_title']
      end

      if attributes.has_key?(:'job_category')
        self.job_category = attributes[:'job_category']
      end

      if attributes.has_key?(:'job_description')
        self.job_description = attributes[:'job_description']
      end

      if attributes.has_key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.has_key?(:'user_group')
        self.user_group = attributes[:'user_group']
      end

      if attributes.has_key?(:'campus_code')
        self.campus_code = attributes[:'campus_code']
      end

      if attributes.has_key?(:'web_site_url')
        self.web_site_url = attributes[:'web_site_url']
      end

      if attributes.has_key?(:'cataloger_level')
        self.cataloger_level = attributes[:'cataloger_level']
      end

      if attributes.has_key?(:'preferred_language')
        self.preferred_language = attributes[:'preferred_language']
      end

      if attributes.has_key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.has_key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'force_password_change')
        self.force_password_change = attributes[:'force_password_change']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'status_date')
        self.status_date = attributes[:'status_date']
      end

      if attributes.has_key?(:'requests')
        self.requests = attributes[:'requests']
      end

      if attributes.has_key?(:'loans')
        self.loans = attributes[:'loans']
      end

      if attributes.has_key?(:'fees')
        self.fees = attributes[:'fees']
      end

      if attributes.has_key?(:'contact_info')
        self.contact_info = attributes[:'contact_info']
      end

      if attributes.has_key?(:'pref_first_name')
        self.pref_first_name = attributes[:'pref_first_name']
      end

      if attributes.has_key?(:'pref_middle_name')
        self.pref_middle_name = attributes[:'pref_middle_name']
      end

      if attributes.has_key?(:'pref_last_name')
        self.pref_last_name = attributes[:'pref_last_name']
      end

      if attributes.has_key?(:'researcher')
        self.researcher = attributes[:'researcher']
      end

      if attributes.has_key?(:'link')
        self.link = attributes[:'link']
      end

      if attributes.has_key?(:'user_identifier')
        self.user_identifier = attributes[:'user_identifier']
      end

      if attributes.has_key?(:'user_role')
        self.user_role = attributes[:'user_role']
      end

      if attributes.has_key?(:'user_statistic')
        self.user_statistic = attributes[:'user_statistic']
      end

      if attributes.has_key?(:'proxy_for_user')
        self.proxy_for_user = attributes[:'proxy_for_user']
      end

      if attributes.has_key?(:'rs_library')
        self.rs_library = attributes[:'rs_library']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          record_type == o.record_type &&
          primary_id == o.primary_id &&
          first_name == o.first_name &&
          middle_name == o.middle_name &&
          last_name == o.last_name &&
          full_name == o.full_name &&
          pin_number == o.pin_number &&
          user_title == o.user_title &&
          job_category == o.job_category &&
          job_description == o.job_description &&
          gender == o.gender &&
          user_group == o.user_group &&
          campus_code == o.campus_code &&
          web_site_url == o.web_site_url &&
          cataloger_level == o.cataloger_level &&
          preferred_language == o.preferred_language &&
          account_type == o.account_type &&
          external_id == o.external_id &&
          password == o.password &&
          force_password_change == o.force_password_change &&
          status == o.status &&
          status_date == o.status_date &&
          requests == o.requests &&
          loans == o.loans &&
          fees == o.fees &&
          contact_info == o.contact_info &&
          pref_first_name == o.pref_first_name &&
          pref_middle_name == o.pref_middle_name &&
          pref_last_name == o.pref_last_name &&
          researcher == o.researcher &&
          link == o.link &&
          user_identifier == o.user_identifier &&
          user_role == o.user_role &&
          user_statistic == o.user_statistic &&
          proxy_for_user == o.proxy_for_user &&
          rs_library == o.rs_library
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [record_type, primary_id, first_name, middle_name, last_name, full_name, pin_number, user_title, job_category, job_description, gender, user_group, campus_code, web_site_url, cataloger_level, preferred_language, account_type, external_id, password, force_password_change, status, status_date, requests, loans, fees, contact_info, pref_first_name, pref_middle_name, pref_last_name, researcher, link, user_identifier, user_role, user_statistic, proxy_for_user, rs_library].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AlmaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
